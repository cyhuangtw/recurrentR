// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rao_gen
SEXP rao_gen(Function f, IntegerVector m, List t, NumericVector y, int p);
RcppExport SEXP recurrentR_rao_gen(SEXP fSEXP, SEXP mSEXP, SEXP tSEXP, SEXP ySEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Function >::type f(fSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type m(mSEXP );
        Rcpp::traits::input_parameter< List >::type t(tSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        SEXP __result = rao_gen(f, m, t, y, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// t_index_gen
SEXP t_index_gen(IntegerVector m, List t, NumericVector s);
RcppExport SEXP recurrentR_t_index_gen(SEXP mSEXP, SEXP tSEXP, SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type m(mSEXP );
        Rcpp::traits::input_parameter< List >::type t(tSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP );
        SEXP __result = t_index_gen(m, t, s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// t_index_inverse_gen
SEXP t_index_inverse_gen(SEXP Rt_index, NumericVector s);
RcppExport SEXP recurrentR_t_index_inverse_gen(SEXP Rt_indexSEXP, SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type Rt_index(Rt_indexSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP );
        SEXP __result = t_index_inverse_gen(Rt_index, s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// t_index_query
SEXP t_index_query(SEXP Rt_index, int i, int j, bool is_R_index = true);
RcppExport SEXP recurrentR_t_index_query(SEXP Rt_indexSEXP, SEXP iSEXP, SEXP jSEXP, SEXP is_R_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type Rt_index(Rt_indexSEXP );
        Rcpp::traits::input_parameter< int >::type i(iSEXP );
        Rcpp::traits::input_parameter< int >::type j(jSEXP );
        Rcpp::traits::input_parameter< bool >::type is_R_index(is_R_indexSEXP );
        SEXP __result = t_index_query(Rt_index, i, j, is_R_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rao_gen_array
SEXP rao_gen_array(NumericVector X_value, IntegerVector m, List t, NumericVector y, SEXP Rt_index);
RcppExport SEXP recurrentR_rao_gen_array(SEXP X_valueSEXP, SEXP mSEXP, SEXP tSEXP, SEXP ySEXP, SEXP Rt_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type X_value(X_valueSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type m(mSEXP );
        Rcpp::traits::input_parameter< List >::type t(tSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< SEXP >::type Rt_index(Rt_indexSEXP );
        SEXP __result = rao_gen_array(X_value, m, t, y, Rt_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rao_export
SEXP rao_export(SEXP pRao);
RcppExport SEXP recurrentR_rao_export(SEXP pRaoSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type pRao(pRaoSEXP );
        SEXP __result = rao_export(pRao);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// g_ij
SEXP g_ij(List pRao_list, NumericVector beta, int Ri, int Rj);
RcppExport SEXP recurrentR_g_ij(SEXP pRao_listSEXP, SEXP betaSEXP, SEXP RiSEXP, SEXP RjSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type pRao_list(pRao_listSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< int >::type Ri(RiSEXP );
        Rcpp::traits::input_parameter< int >::type Rj(RjSEXP );
        SEXP __result = g_ij(pRao_list, beta, Ri, Rj);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S
SEXP S(List pRao_list, NumericVector beta);
RcppExport SEXP recurrentR_S(SEXP pRao_listSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type pRao_list(pRao_listSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        SEXP __result = S(pRao_list, beta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dS_over_dbeta
SEXP dS_over_dbeta(List pRao_list, NumericVector beta);
RcppExport SEXP recurrentR_dS_over_dbeta(SEXP pRao_listSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type pRao_list(pRao_listSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        SEXP __result = dS_over_dbeta(pRao_list, beta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// V1_hat
SEXP V1_hat(List pRao_list, NumericVector beta);
RcppExport SEXP recurrentR_V1_hat(SEXP pRao_listSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type pRao_list(pRao_listSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        SEXP __result = V1_hat(pRao_list, beta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// d_beta
SEXP d_beta(NumericVector beta, NumericVector X_value, SEXP Rt_index);
RcppExport SEXP recurrentR_d_beta(SEXP betaSEXP, SEXP X_valueSEXP, SEXP Rt_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type X_value(X_valueSEXP );
        Rcpp::traits::input_parameter< SEXP >::type Rt_index(Rt_indexSEXP );
        SEXP __result = d_beta(beta, X_value, Rt_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// R_beta
SEXP R_beta(NumericVector beta, NumericVector X_value, SEXP Rt_index, IntegerVector s_upper_index);
RcppExport SEXP recurrentR_R_beta(SEXP betaSEXP, SEXP X_valueSEXP, SEXP Rt_indexSEXP, SEXP s_upper_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type X_value(X_valueSEXP );
        Rcpp::traits::input_parameter< SEXP >::type Rt_index(Rt_indexSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type s_upper_index(s_upper_indexSEXP );
        SEXP __result = R_beta(beta, X_value, Rt_index, s_upper_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// V_hat_tilde_Q_s_gen
SEXP V_hat_tilde_Q_s_gen(NumericVector beta, NumericVector X_value, SEXP Rt_index);
RcppExport SEXP recurrentR_V_hat_tilde_Q_s_gen(SEXP betaSEXP, SEXP X_valueSEXP, SEXP Rt_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type X_value(X_valueSEXP );
        Rcpp::traits::input_parameter< SEXP >::type Rt_index(Rt_indexSEXP );
        SEXP __result = V_hat_tilde_Q_s_gen(beta, X_value, Rt_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// V_hat_tilde_R_s_gen
SEXP V_hat_tilde_R_s_gen(NumericVector beta, NumericVector X_value, SEXP Rt_index, IntegerVector s_upper_index);
RcppExport SEXP recurrentR_V_hat_tilde_R_s_gen(SEXP betaSEXP, SEXP X_valueSEXP, SEXP Rt_indexSEXP, SEXP s_upper_indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type X_value(X_valueSEXP );
        Rcpp::traits::input_parameter< SEXP >::type Rt_index(Rt_indexSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type s_upper_index(s_upper_indexSEXP );
        SEXP __result = V_hat_tilde_R_s_gen(beta, X_value, Rt_index, s_upper_index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// phi_i_j_hat_s_gen
SEXP phi_i_j_hat_s_gen(NumericVector Q_s, NumericVector R_s, NumericMatrix V_Q, NumericMatrix V_R);
RcppExport SEXP recurrentR_phi_i_j_hat_s_gen(SEXP Q_sSEXP, SEXP R_sSEXP, SEXP V_QSEXP, SEXP V_RSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type Q_s(Q_sSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type R_s(R_sSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type V_Q(V_QSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type V_R(V_RSEXP );
        SEXP __result = phi_i_j_hat_s_gen(Q_s, R_s, V_Q, V_R);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// exp_X_beta_d_Lambda_0
SEXP exp_X_beta_d_Lambda_0(NumericVector beta, NumericVector X_value, NumericVector s_index_upper, NumericVector dLambda_s);
RcppExport SEXP recurrentR_exp_X_beta_d_Lambda_0(SEXP betaSEXP, SEXP X_valueSEXP, SEXP s_index_upperSEXP, SEXP dLambda_sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type X_value(X_valueSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type s_index_upper(s_index_upperSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type dLambda_s(dLambda_sSEXP );
        SEXP __result = exp_X_beta_d_Lambda_0(beta, X_value, s_index_upper, dLambda_s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// X_V_2_inv_g_ij_exp_X_beta_d_Lambda_0
SEXP X_V_2_inv_g_ij_exp_X_beta_d_Lambda_0(NumericVector beta, NumericVector X_value, NumericVector s_index_upper, NumericVector Lambda_s, NumericVector dLambda_s, NumericMatrix& V2_inv, List pRao_list, List Rkappa_i_j_s);
RcppExport SEXP recurrentR_X_V_2_inv_g_ij_exp_X_beta_d_Lambda_0(SEXP betaSEXP, SEXP X_valueSEXP, SEXP s_index_upperSEXP, SEXP Lambda_sSEXP, SEXP dLambda_sSEXP, SEXP V2_invSEXP, SEXP pRao_listSEXP, SEXP Rkappa_i_j_sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type X_value(X_valueSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type s_index_upper(s_index_upperSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type Lambda_s(Lambda_sSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type dLambda_s(dLambda_sSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type V2_inv(V2_invSEXP );
        Rcpp::traits::input_parameter< List >::type pRao_list(pRao_listSEXP );
        Rcpp::traits::input_parameter< List >::type Rkappa_i_j_s(Rkappa_i_j_sSEXP );
        SEXP __result = X_V_2_inv_g_ij_exp_X_beta_d_Lambda_0(beta, X_value, s_index_upper, Lambda_s, dLambda_s, V2_inv, pRao_list, Rkappa_i_j_s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// get_s_d
SEXP get_s_d(List t);
RcppExport SEXP recurrentR_get_s_d(SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type t(tSEXP );
        SEXP __result = get_s_d(t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// eval_N
SEXP eval_N(NumericVector s, NumericVector y, IntegerVector m);
RcppExport SEXP recurrentR_eval_N(SEXP sSEXP, SEXP ySEXP, SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type m(mSEXP );
        SEXP __result = eval_N(s, y, m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
